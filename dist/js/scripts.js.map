{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/pym.js/dist/pym.v1.js","src/js/scripts.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","factory","define","amd","window","pym","this","lib","_raiseCustomEvent","eventName","event","document","createEvent","initEvent","dispatchEvent","_getParameterByName","name","regex","RegExp","replace","results","exec","location","search","decodeURIComponent","_isSafeMessage","settings","xdomain","origin","match","data","_makeMessage","id","messageType","message","join","_makeMessageRegex","bits","_getNow","Date","now","getTime","_throttle","func","wait","options","context","args","result","timeout","previous","later","leading","apply","remaining","arguments","clearTimeout","trailing","setTimeout","_cleanAutoInitInstances","autoInitInstances","idx","instance","el","getElementsByTagName","contentWindow","splice","autoInit","doNotRaiseEvents","elements","querySelectorAll","element","setAttribute","Math","random","toString","substr","src","getAttribute","title","sandbox","allowfullscreen","parenturlparam","parenturlvalue","optionalparams","trackscroll","scrollwait","config","attribute","Number","isNaN","console","err","parent","Parent","push","url","getElementById","iframe","href","messageRegex","messageHandlers","_constructIframe","width","offsetWidth","createElement","hash","hashIndex","indexOf","substring","encodeURIComponent","undefined","firstChild","removeChild","appendChild","addEventListener","_onResize","_throttleOnScroll","sendWidth","sendViewportAndIFramePosition","bind","_onScroll","_fire","remove","removeEventListener","_processMessage","_onHeightMessage","height","parseInt","_onNavigateToMessage","_onScrollToChildPosMessage","iframePos","getBoundingClientRect","top","pageYOffset","totalOffset","scrollTo","onMessage","callback","sendMessage","postMessage","iframeRect","vWidth","innerWidth","documentElement","clientWidth","vHeight","innerHeight","clientHeight","payload","left","bottom","right","key","Child","parentWidth","parentTitle","parentUrl","renderCallback","polling","timerId","_onWidthMessage","sendHeight","offsetHeight","scrollParentTo","navigateParentTo","scrollParentToChildEl","topPos","scrollParentToChildPos","pos","clearInterval","setInterval","onMarkedEmbeddedStatus","newClassForHtml","htmlElement","originalHtmlClasses","className","self","_pym","pymChild","_pym2","default","$","ready","twentytwenty","no_overlay"],"mappings":"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","file":"scripts.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*! pym.js - v1.3.0 - 2017-07-20 */\n/*\n* Pym.js is library that resizes an iframe based on the width of the parent and the resulting height of the child.\n* Check out the docs at http://blog.apps.npr.org/pym.js/ or the readme at README.md for usage.\n*/\n\n/** @module pym */\n(function(factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    }\n    else if (typeof module !== 'undefined' && module.exports) {\n        module.exports = factory();\n    } else {\n        window.pym = factory.call(this);\n    }\n})(function() {\n    var MESSAGE_DELIMITER = 'xPYMx';\n\n    var lib = {};\n\n    /**\n    * Create and dispatch a custom pym event\n    *\n    * @method _raiseCustomEvent\n    * @inner\n    *\n    * @param {String} eventName\n    */\n   var _raiseCustomEvent = function(eventName) {\n     var event = document.createEvent('Event');\n     event.initEvent('pym:' + eventName, true, true);\n     document.dispatchEvent(event);\n   };\n\n    /**\n    * Generic function for parsing URL params.\n    * Via http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\n    *\n    * @method _getParameterByName\n    * @inner\n    *\n    * @param {String} name The name of the paramter to get from the URL.\n    */\n    var _getParameterByName = function(name) {\n        var regex = new RegExp(\"[\\\\?&]\" + name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]') + '=([^&#]*)');\n        var results = regex.exec(location.search);\n\n        if (results === null) {\n            return '';\n        }\n\n        return decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n    };\n\n    /**\n     * Check the message to make sure it comes from an acceptable xdomain.\n     * Defaults to '*' but can be overriden in config.\n     *\n     * @method _isSafeMessage\n     * @inner\n     *\n     * @param {Event} e The message event.\n     * @param {Object} settings Configuration.\n     */\n    var _isSafeMessage = function(e, settings) {\n        if (settings.xdomain !== '*') {\n            // If origin doesn't match our xdomain, return.\n            if (!e.origin.match(new RegExp(settings.xdomain + '$'))) { return; }\n        }\n\n        // Ignore events that do not carry string data #151\n        if (typeof e.data !== 'string') { return; }\n\n        return true;\n    };\n\n    /**\n     * Construct a message to send between frames.\n     *\n     * NB: We use string-building here because JSON message passing is\n     * not supported in all browsers.\n     *\n     * @method _makeMessage\n     * @inner\n     *\n     * @param {String} id The unique id of the message recipient.\n     * @param {String} messageType The type of message to send.\n     * @param {String} message The message to send.\n     */\n    var _makeMessage = function(id, messageType, message) {\n        var bits = ['pym', id, messageType, message];\n\n        return bits.join(MESSAGE_DELIMITER);\n    };\n\n    /**\n     * Construct a regex to validate and parse messages.\n     *\n     * @method _makeMessageRegex\n     * @inner\n     *\n     * @param {String} id The unique id of the message recipient.\n     */\n    var _makeMessageRegex = function(id) {\n        var bits = ['pym', id, '(\\\\S+)', '(.*)'];\n\n        return new RegExp('^' + bits.join(MESSAGE_DELIMITER) + '$');\n    };\n\n    /**\n    * Underscore implementation of getNow\n    *\n    * @method _getNow\n    * @inner\n    *\n    */\n    var _getNow = Date.now || function() {\n        return new Date().getTime();\n    };\n\n    /**\n    * Underscore implementation of throttle\n    *\n    * @method _throttle\n    * @inner\n    *\n    * @param {function} func Throttled function\n    * @param {number} wait Throttle wait time\n    * @param {object} options Throttle settings\n    */\n\n    var _throttle = function(func, wait, options) {\n        var context, args, result;\n        var timeout = null;\n        var previous = 0;\n        if (!options) {options = {};}\n        var later = function() {\n            previous = options.leading === false ? 0 : _getNow();\n            timeout = null;\n            result = func.apply(context, args);\n            if (!timeout) {context = args = null;}\n        };\n        return function() {\n            var now = _getNow();\n            if (!previous && options.leading === false) {previous = now;}\n            var remaining = wait - (now - previous);\n            context = this;\n            args = arguments;\n            if (remaining <= 0 || remaining > wait) {\n                if (timeout) {\n                    clearTimeout(timeout);\n                    timeout = null;\n                }\n                previous = now;\n                result = func.apply(context, args);\n                if (!timeout) {context = args = null;}\n            } else if (!timeout && options.trailing !== false) {\n                timeout = setTimeout(later, remaining);\n            }\n            return result;\n        };\n    };\n\n    /**\n     * Clean autoInit Instances: those that point to contentless iframes\n     * @method _cleanAutoInitInstances\n     * @inner\n     */\n    var _cleanAutoInitInstances = function() {\n        var length = lib.autoInitInstances.length;\n\n        // Loop backwards to avoid index issues\n        for (var idx = length - 1; idx >= 0; idx--) {\n            var instance = lib.autoInitInstances[idx];\n            // If instance has been removed or is contentless then remove it\n            if (instance.el.getElementsByTagName('iframe').length &&\n                instance.el.getElementsByTagName('iframe')[0].contentWindow) {\n                continue;\n            }\n            else {\n                // Remove the reference to the removed or orphan instance\n                lib.autoInitInstances.splice(idx,1);\n            }\n        }\n    };\n\n    /**\n     * Store auto initialized Pym instances for further reference\n     * @name module:pym#autoInitInstances\n     * @type Array\n     * @default []\n     */\n    lib.autoInitInstances = [];\n\n    /**\n     * Initialize Pym for elements on page that have data-pym attributes.\n     * Expose autoinit in case we need to call it from the outside\n     * @instance\n     * @method autoInit\n     * @param {Boolean} doNotRaiseEvents flag to avoid sending custom events\n     */\n    lib.autoInit = function(doNotRaiseEvents) {\n        var elements = document.querySelectorAll('[data-pym-src]:not([data-pym-auto-initialized])');\n        var length = elements.length;\n\n        // Clean stored instances in case needed\n        _cleanAutoInitInstances();\n        for (var idx = 0; idx < length; ++idx) {\n            var element = elements[idx];\n            /*\n            * Mark automatically-initialized elements so they are not\n            * re-initialized if the user includes pym.js more than once in the\n            * same document.\n            */\n            element.setAttribute('data-pym-auto-initialized', '');\n\n            // Ensure elements have an id\n            if (element.id === '') {\n                element.id = 'pym-' + idx + \"-\" + Math.random().toString(36).substr(2,5);\n            }\n\n            var src = element.getAttribute('data-pym-src');\n\n            // List of data attributes to configure the component\n            // structure: {'attribute name': 'type'}\n            var settings = {'xdomain': 'string', 'title': 'string', 'name': 'string', 'id': 'string',\n                            'sandbox': 'string', 'allowfullscreen': 'boolean',\n                            'parenturlparam': 'string', 'parenturlvalue': 'string',\n                            'optionalparams': 'boolean', 'trackscroll': 'boolean',\n                            'scrollwait': 'number'};\n\n            var config = {};\n\n            for (var attribute in settings) {\n                // via https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute#Notes\n               if (element.getAttribute('data-pym-'+attribute) !== null) {\n                  switch (settings[attribute]) {\n                    case 'boolean':\n                       config[attribute] = !(element.getAttribute('data-pym-'+attribute) === 'false'); // jshint ignore:line\n                       break;\n                    case 'string':\n                       config[attribute] = element.getAttribute('data-pym-'+attribute);\n                       break;\n                    case 'number':\n                        var n = Number(element.getAttribute('data-pym-'+attribute));\n                        if (!isNaN(n)) {\n                            config[attribute] = n;\n                        }\n                        break;\n                    default:\n                       console.err('unrecognized attribute type');\n                  }\n               }\n            }\n\n            // Store references to autoinitialized pym instances\n            var parent = new lib.Parent(element.id, src, config);\n            lib.autoInitInstances.push(parent);\n        }\n\n        // Fire customEvent\n        if (!doNotRaiseEvents) {\n            _raiseCustomEvent(\"pym-initialized\");\n        }\n        // Return stored autoinitalized pym instances\n        return lib.autoInitInstances;\n    };\n\n    /**\n     * The Parent half of a response iframe.\n     *\n     * @memberof module:pym\n     * @class Parent\n     * @param {String} id The id of the div into which the iframe will be rendered. sets {@link module:pym.Parent~id}\n     * @param {String} url The url of the iframe source. sets {@link module:pym.Parent~url}\n     * @param {Object} [config] Configuration for the parent instance. sets {@link module:pym.Parent~settings}\n     * @param {string} [config.xdomain='*'] - xdomain to validate messages received\n     * @param {string} [config.title] - if passed it will be assigned to the iframe title attribute\n     * @param {string} [config.name] - if passed it will be assigned to the iframe name attribute\n     * @param {string} [config.id] - if passed it will be assigned to the iframe id attribute\n     * @param {boolean} [config.allowfullscreen] - if passed and different than false it will be assigned to the iframe allowfullscreen attribute\n     * @param {string} [config.sandbox] - if passed it will be assigned to the iframe sandbox attribute (we do not validate the syntax so be careful!!)\n     * @param {string} [config.parenturlparam] - if passed it will be override the default parentUrl query string parameter name passed to the iframe src\n     * @param {string} [config.parenturlvalue] - if passed it will be override the default parentUrl query string parameter value passed to the iframe src\n     * @param {string} [config.optionalparams] - if passed and different than false it will strip the querystring params parentUrl and parentTitle passed to the iframe src\n     * @param {boolean} [config.trackscroll] - if passed it will activate scroll tracking on the parent\n     * @param {number} [config.scrollwait] - if passed it will set the throttle wait in order to fire scroll messaging. Defaults to 100 ms.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe iFrame}\n     */\n    lib.Parent = function(id, url, config) {\n        /**\n         * The id of the container element\n         *\n         * @memberof module:pym.Parent\n         * @member {string} id\n         * @inner\n         */\n        this.id = id;\n        /**\n         * The url that will be set as the iframe's src\n         *\n         * @memberof module:pym.Parent\n         * @member {String} url\n         * @inner\n         */\n        this.url = url;\n\n        /**\n         * The container DOM object\n         *\n         * @memberof module:pym.Parent\n         * @member {HTMLElement} el\n         * @inner\n         */\n        this.el = document.getElementById(id);\n        /**\n         * The contained child iframe\n         *\n         * @memberof module:pym.Parent\n         * @member {HTMLElement} iframe\n         * @inner\n         * @default null\n         */\n        this.iframe = null;\n        /**\n         * The parent instance settings, updated by the values passed in the config object\n         *\n         * @memberof module:pym.Parent\n         * @member {Object} settings\n         * @inner\n         */\n        this.settings = {\n            xdomain: '*',\n            optionalparams: true,\n            parenturlparam: 'parentUrl',\n            parenturlvalue: window.location.href,\n            trackscroll: false,\n            scrollwait: 100,\n        };\n        /**\n         * RegularExpression to validate the received messages\n         *\n         * @memberof module:pym.Parent\n         * @member {String} messageRegex\n         * @inner\n         */\n        this.messageRegex = _makeMessageRegex(this.id);\n        /**\n         * Stores the registered messageHandlers for each messageType\n         *\n         * @memberof module:pym.Parent\n         * @member {Object} messageHandlers\n         * @inner\n         */\n        this.messageHandlers = {};\n\n        // ensure a config object\n        config = (config || {});\n\n        /**\n         * Construct the iframe.\n         *\n         * @memberof module:pym.Parent\n         * @method _constructIframe\n         * @inner\n         */\n        this._constructIframe = function() {\n            // Calculate the width of this element.\n            var width = this.el.offsetWidth.toString();\n\n            // Create an iframe element attached to the document.\n            this.iframe = document.createElement('iframe');\n\n            // Save fragment id\n            var hash = '';\n            var hashIndex = this.url.indexOf('#');\n\n            if (hashIndex > -1) {\n                hash = this.url.substring(hashIndex, this.url.length);\n                this.url = this.url.substring(0, hashIndex);\n            }\n\n            // If the URL contains querystring bits, use them.\n            // Otherwise, just create a set of valid params.\n            if (this.url.indexOf('?') < 0) {\n                this.url += '?';\n            } else {\n                this.url += '&';\n            }\n\n            // Append the initial width as a querystring parameter\n            // and optional params if configured to do so\n            this.iframe.src = this.url + 'initialWidth=' + width +\n                                         '&childId=' + this.id;\n\n            if (this.settings.optionalparams) {\n                this.iframe.src += '&parentTitle=' + encodeURIComponent(document.title);\n                this.iframe.src += '&'+ this.settings.parenturlparam + '=' + encodeURIComponent(this.settings.parenturlvalue);\n            }\n            this.iframe.src +=hash;\n\n            // Set some attributes to this proto-iframe.\n            this.iframe.setAttribute('width', '100%');\n            this.iframe.setAttribute('scrolling', 'no');\n            this.iframe.setAttribute('marginheight', '0');\n            this.iframe.setAttribute('frameborder', '0');\n\n            if (this.settings.title) {\n                this.iframe.setAttribute('title', this.settings.title);\n            }\n\n            if (this.settings.allowfullscreen !== undefined && this.settings.allowfullscreen !== false) {\n                this.iframe.setAttribute('allowfullscreen','');\n            }\n\n            if (this.settings.sandbox !== undefined && typeof this.settings.sandbox === 'string') {\n                this.iframe.setAttribute('sandbox', this.settings.sandbox);\n            }\n\n            if (this.settings.id) {\n                if (!document.getElementById(this.settings.id)) {\n                    this.iframe.setAttribute('id', this.settings.id);\n                }\n            }\n\n            if (this.settings.name) {\n                this.iframe.setAttribute('name', this.settings.name);\n            }\n\n            // Replace the child content if needed\n            // (some CMSs might strip out empty elements)\n            while(this.el.firstChild) { this.el.removeChild(this.el.firstChild); }\n            // Append the iframe to our element.\n            this.el.appendChild(this.iframe);\n\n            // Add an event listener that will handle redrawing the child on resize.\n            window.addEventListener('resize', this._onResize);\n\n            // Add an event listener that will send the child the viewport.\n            if (this.settings.trackscroll) {\n                window.addEventListener('scroll', this._throttleOnScroll);\n            }\n        };\n\n        /**\n         * Send width on resize.\n         *\n         * @memberof module:pym.Parent\n         * @method _onResize\n         * @inner\n         */\n        this._onResize = function() {\n            this.sendWidth();\n            if (this.settings.trackscroll) {\n                this.sendViewportAndIFramePosition();\n            }\n        }.bind(this);\n\n        /**\n         * Send viewport and iframe info on scroll.\n         *\n         * @memberof module:pym.Parent\n         * @method _onScroll\n         * @inner\n         */\n        this._onScroll = function() {\n            this.sendViewportAndIFramePosition();\n        }.bind(this);\n\n        /**\n         * Fire all event handlers for a given message type.\n         *\n         * @memberof module:pym.Parent\n         * @method _fire\n         * @inner\n         *\n         * @param {String} messageType The type of message.\n         * @param {String} message The message data.\n         */\n        this._fire = function(messageType, message) {\n            if (messageType in this.messageHandlers) {\n                for (var i = 0; i < this.messageHandlers[messageType].length; i++) {\n                   this.messageHandlers[messageType][i].call(this, message);\n                }\n            }\n        };\n\n        /**\n         * Remove this parent from the page and unbind it's event handlers.\n         *\n         * @memberof module:pym.Parent\n         * @method remove\n         * @instance\n         */\n        this.remove = function() {\n            window.removeEventListener('message', this._processMessage);\n            window.removeEventListener('resize', this._onResize);\n\n            this.el.removeChild(this.iframe);\n            // _cleanAutoInitInstances in case this parent was autoInitialized\n            _cleanAutoInitInstances();\n        };\n\n        /**\n         * Process a new message from the child.\n         *\n         * @memberof module:pym.Parent\n         * @method _processMessage\n         * @inner\n         *\n         * @param {Event} e A message event.\n         */\n        this._processMessage = function(e) {\n            // First, punt if this isn't from an acceptable xdomain.\n            if (!_isSafeMessage(e, this.settings)) {\n                return;\n            }\n\n            // Discard object messages, we only care about strings\n            if (typeof e.data !== 'string') {\n                return;\n            }\n\n            // Grab the message from the child and parse it.\n            var match = e.data.match(this.messageRegex);\n\n            // If there's no match or too many matches in the message, punt.\n            if (!match || match.length !== 3) {\n                return false;\n            }\n\n            var messageType = match[1];\n            var message = match[2];\n\n            this._fire(messageType, message);\n        }.bind(this);\n\n        /**\n         * Resize iframe in response to new height message from child.\n         *\n         * @memberof module:pym.Parent\n         * @method _onHeightMessage\n         * @inner\n         *\n         * @param {String} message The new height.\n         */\n        this._onHeightMessage = function(message) {\n            /*\n             * Handle parent height message from child.\n             */\n            var height = parseInt(message);\n\n            this.iframe.setAttribute('height', height + 'px');\n        };\n\n        /**\n         * Navigate parent to a new url.\n         *\n         * @memberof module:pym.Parent\n         * @method _onNavigateToMessage\n         * @inner\n         *\n         * @param {String} message The url to navigate to.\n         */\n        this._onNavigateToMessage = function(message) {\n            /*\n             * Handle parent scroll message from child.\n             */\n            document.location.href = message;\n        };\n\n        /**\n         * Scroll parent to a given child position.\n         *\n         * @memberof module:pym.Parent\n         * @method _onScrollToChildPosMessage\n         * @inner\n         *\n         * @param {String} message The offset inside the child page.\n         */\n        this._onScrollToChildPosMessage = function(message) {\n            // Get the child container position using getBoundingClientRect + pageYOffset\n            // via https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n            var iframePos = document.getElementById(this.id).getBoundingClientRect().top + window.pageYOffset;\n\n            var totalOffset = iframePos + parseInt(message);\n            window.scrollTo(0, totalOffset);\n        };\n\n        /**\n         * Bind a callback to a given messageType from the child.\n         *\n         * Reserved message names are: \"height\", \"scrollTo\" and \"navigateTo\".\n         *\n         * @memberof module:pym.Parent\n         * @method onMessage\n         * @instance\n         *\n         * @param {String} messageType The type of message being listened for.\n         * @param {module:pym.Parent~onMessageCallback} callback The callback to invoke when a message of the given type is received.\n         */\n        this.onMessage = function(messageType, callback) {\n            if (!(messageType in this.messageHandlers)) {\n                this.messageHandlers[messageType] = [];\n            }\n\n            this.messageHandlers[messageType].push(callback);\n        };\n\n        /**\n         * @callback module:pym.Parent~onMessageCallback\n         * @param {String} message The message data.\n         */\n\n        /**\n         * Send a message to the the child.\n         *\n         * @memberof module:pym.Parent\n         * @method sendMessage\n         * @instance\n         *\n         * @param {String} messageType The type of message to send.\n         * @param {String} message The message data to send.\n         */\n        this.sendMessage = function(messageType, message) {\n            // When used alongside with pjax some references are lost\n            if (this.el.getElementsByTagName('iframe').length) {\n                if (this.el.getElementsByTagName('iframe')[0].contentWindow) {\n                    this.el.getElementsByTagName('iframe')[0].contentWindow\n                        .postMessage(_makeMessage(this.id, messageType, message), '*');\n                }\n                else {\n                    // Contentless child detected remove listeners and iframe\n                    this.remove();\n                }\n            }\n        };\n\n        /**\n         * Transmit the current iframe width to the child.\n         *\n         * You shouldn't need to call this directly.\n         *\n         * @memberof module:pym.Parent\n         * @method sendWidth\n         * @instance\n         */\n        this.sendWidth = function() {\n            var width = this.el.offsetWidth.toString();\n            this.sendMessage('width', width);\n        };\n\n        /**\n         * Transmit the current viewport and iframe position to the child.\n         * Sends viewport width, viewport height\n         * and iframe bounding rect top-left-bottom-right\n         * all separated by spaces\n         *\n         * You shouldn't need to call this directly.\n         *\n         * @memberof module:pym.Parent\n         * @method sendViewportAndIFramePosition\n         * @instance\n         */\n        this.sendViewportAndIFramePosition = function() {\n            var iframeRect = this.iframe.getBoundingClientRect();\n            var vWidth   = window.innerWidth || document.documentElement.clientWidth;\n            var vHeight  = window.innerHeight || document.documentElement.clientHeight;\n            var payload = vWidth + ' ' + vHeight;\n            payload += ' ' + iframeRect.top + ' ' + iframeRect.left;\n            payload += ' ' + iframeRect.bottom + ' ' + iframeRect.right;\n            this.sendMessage('viewport-iframe-position', payload);\n        };\n\n        // Add any overrides to settings coming from config.\n        for (var key in config) {\n            this.settings[key] = config[key];\n        }\n\n        /**\n         * Throttled scroll function.\n         *\n         * @memberof module:pym.Parent\n         * @method _throttleOnScroll\n         * @inner\n         */\n        this._throttleOnScroll = _throttle(this._onScroll.bind(this), this.settings.scrollwait);\n\n        // Bind required message handlers\n        this.onMessage('height', this._onHeightMessage);\n        this.onMessage('navigateTo', this._onNavigateToMessage);\n        this.onMessage('scrollToChildPos', this._onScrollToChildPosMessage);\n\n        // Add a listener for processing messages from the child.\n        window.addEventListener('message', this._processMessage, false);\n\n        // Construct the iframe in the container element.\n        this._constructIframe();\n\n        return this;\n    };\n\n    /**\n     * The Child half of a responsive iframe.\n     *\n     * @memberof module:pym\n     * @class Child\n     * @param {Object} [config] Configuration for the child instance. sets {@link module:pym.Child~settings}\n     * @param {function} [config.renderCallback=null] Callback invoked after receiving a resize event from the parent, sets {@link module:pym.Child#settings.renderCallback}\n     * @param {string} [config.xdomain='*'] - xdomain to validate messages received\n     * @param {number} [config.polling=0] - polling frequency in milliseconds to send height to parent\n     * @param {number} [config.id] - parent container id used when navigating the child iframe to a new page but we want to keep it responsive.\n     * @param {string} [config.parenturlparam] - if passed it will be override the default parentUrl query string parameter name expected on the iframe src\n     */\n    lib.Child = function(config) {\n        /**\n         * The initial width of the parent page\n         *\n         * @memberof module:pym.Child\n         * @member {string} parentWidth\n         * @inner\n         */\n        this.parentWidth = null;\n        /**\n         * The id of the parent container\n         *\n         * @memberof module:pym.Child\n         * @member {String} id\n         * @inner\n         */\n        this.id = null;\n        /**\n         * The title of the parent page from document.title.\n         *\n         * @memberof module:pym.Child\n         * @member {String} parentTitle\n         * @inner\n         */\n        this.parentTitle = null;\n        /**\n         * The URL of the parent page from window.location.href.\n         *\n         * @memberof module:pym.Child\n         * @member {String} parentUrl\n         * @inner\n         */\n        this.parentUrl = null;\n        /**\n         * The settings for the child instance. Can be overriden by passing a config object to the child constructor\n         * i.e.: var pymChild = new pym.Child({renderCallback: render, xdomain: \"\\\\*\\.npr\\.org\"})\n         *\n         * @memberof module:pym.Child.settings\n         * @member {Object} settings - default settings for the child instance\n         * @inner\n         */\n        this.settings = {\n            renderCallback: null,\n            xdomain: '*',\n            polling: 0,\n            parenturlparam: 'parentUrl'\n        };\n\n        /**\n         * The timerId in order to be able to stop when polling is enabled\n         *\n         * @memberof module:pym.Child\n         * @member {String} timerId\n         * @inner\n         */\n        this.timerId = null;\n        /**\n         * RegularExpression to validate the received messages\n         *\n         * @memberof module:pym.Child\n         * @member {String} messageRegex\n         * @inner\n         */\n        this.messageRegex = null;\n        /**\n         * Stores the registered messageHandlers for each messageType\n         *\n         * @memberof module:pym.Child\n         * @member {Object} messageHandlers\n         * @inner\n         */\n        this.messageHandlers = {};\n\n        // Ensure a config object\n        config = (config || {});\n\n        /**\n         * Bind a callback to a given messageType from the child.\n         *\n         * Reserved message names are: \"width\".\n         *\n         * @memberof module:pym.Child\n         * @method onMessage\n         * @instance\n         *\n         * @param {String} messageType The type of message being listened for.\n         * @param {module:pym.Child~onMessageCallback} callback The callback to invoke when a message of the given type is received.\n         */\n        this.onMessage = function(messageType, callback) {\n\n            if (!(messageType in this.messageHandlers)) {\n                this.messageHandlers[messageType] = [];\n            }\n\n            this.messageHandlers[messageType].push(callback);\n        };\n\n        /**\n         * @callback module:pym.Child~onMessageCallback\n         * @param {String} message The message data.\n         */\n\n\n        /**\n         * Fire all event handlers for a given message type.\n         *\n         * @memberof module:pym.Child\n         * @method _fire\n         * @inner\n         *\n         * @param {String} messageType The type of message.\n         * @param {String} message The message data.\n         */\n        this._fire = function(messageType, message) {\n            /*\n             * Fire all event handlers for a given message type.\n             */\n            if (messageType in this.messageHandlers) {\n                for (var i = 0; i < this.messageHandlers[messageType].length; i++) {\n                   this.messageHandlers[messageType][i].call(this, message);\n                }\n            }\n        };\n\n        /**\n         * Process a new message from the parent.\n         *\n         * @memberof module:pym.Child\n         * @method _processMessage\n         * @inner\n         *\n         * @param {Event} e A message event.\n         */\n        this._processMessage = function(e) {\n            /*\n            * Process a new message from parent frame.\n            */\n            // First, punt if this isn't from an acceptable xdomain.\n            if (!_isSafeMessage(e, this.settings)) {\n                return;\n            }\n\n            // Discard object messages, we only care about strings\n            if (typeof e.data !== 'string') {\n                return;\n            }\n\n            // Get the message from the parent.\n            var match = e.data.match(this.messageRegex);\n\n            // If there's no match or it's a bad format, punt.\n            if (!match || match.length !== 3) { return; }\n\n            var messageType = match[1];\n            var message = match[2];\n\n            this._fire(messageType, message);\n        }.bind(this);\n\n        /**\n         * Resize iframe in response to new width message from parent.\n         *\n         * @memberof module:pym.Child\n         * @method _onWidthMessage\n         * @inner\n         *\n         * @param {String} message The new width.\n         */\n        this._onWidthMessage = function(message) {\n            /*\n             * Handle width message from the child.\n             */\n            var width = parseInt(message);\n\n            // Change the width if it's different.\n            if (width !== this.parentWidth) {\n                this.parentWidth = width;\n\n                // Call the callback function if it exists.\n                if (this.settings.renderCallback) {\n                    this.settings.renderCallback(width);\n                }\n\n                // Send the height back to the parent.\n                this.sendHeight();\n            }\n        };\n\n        /**\n         * Send a message to the the Parent.\n         *\n         * @memberof module:pym.Child\n         * @method sendMessage\n         * @instance\n         *\n         * @param {String} messageType The type of message to send.\n         * @param {String} message The message data to send.\n         */\n        this.sendMessage = function(messageType, message) {\n            /*\n             * Send a message to the parent.\n             */\n            window.parent.postMessage(_makeMessage(this.id, messageType, message), '*');\n        };\n\n        /**\n         * Transmit the current iframe height to the parent.\n         *\n         * Call this directly in cases where you manually alter the height of the iframe contents.\n         *\n         * @memberof module:pym.Child\n         * @method sendHeight\n         * @instance\n         */\n        this.sendHeight = function() {\n            // Get the child's height.\n            var height = document.getElementsByTagName('body')[0].offsetHeight.toString();\n\n            // Send the height to the parent.\n            this.sendMessage('height', height);\n\n            return height;\n        }.bind(this);\n\n        /**\n         * Scroll parent to a given element id.\n         *\n         * @memberof module:pym.Child\n         * @method scrollParentTo\n         * @instance\n         *\n         * @param {String} hash The id of the element to scroll to.\n         */\n        this.scrollParentTo = function(hash) {\n            this.sendMessage('navigateTo', '#' + hash);\n        };\n\n        /**\n         * Navigate parent to a given url.\n         *\n         * @memberof module:pym.Child\n         * @method navigateParentTo\n         * @instance\n         *\n         * @param {String} url The url to navigate to.\n         */\n        this.navigateParentTo = function(url) {\n            this.sendMessage('navigateTo', url);\n        };\n\n        /**\n         * Scroll parent to a given child element id.\n         *\n         * @memberof module:pym.Child\n         * @method scrollParentToChildEl\n         * @instance\n         *\n         * @param {String} id The id of the child element to scroll to.\n         */\n        this.scrollParentToChildEl = function(id) {\n            // Get the child element position using getBoundingClientRect + pageYOffset\n            // via https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n            var topPos = document.getElementById(id).getBoundingClientRect().top + window.pageYOffset;\n            this.scrollParentToChildPos(topPos);\n        };\n\n        /**\n         * Scroll parent to a particular child offset.\n         *\n         * @memberof module:pym.Child\n         * @method scrollParentToChildPos\n         * @instance\n         *\n         * @param {Number} pos The offset of the child element to scroll to.\n         */\n        this.scrollParentToChildPos = function(pos) {\n            this.sendMessage('scrollToChildPos', pos.toString());\n        };\n\n        /**\n         * Mark Whether the child is embedded or not\n         * executes a callback in case it was passed to the config\n         *\n         * @memberof module:pym.Child\n         * @method _markWhetherEmbedded\n         * @inner\n         *\n         * @param {module:pym.Child~onMarkedEmbeddedStatus} The callback to execute after determining whether embedded or not.\n         */\n        var _markWhetherEmbedded = function(onMarkedEmbeddedStatus) {\n          var htmlElement = document.getElementsByTagName('html')[0],\n              newClassForHtml,\n              originalHtmlClasses = htmlElement.className;\n          try {\n            if(window.self !== window.top) {\n              newClassForHtml = \"embedded\";\n            }else{\n              newClassForHtml = \"not-embedded\";\n            }\n          }catch(e) {\n            newClassForHtml = \"embedded\";\n          }\n          if(originalHtmlClasses.indexOf(newClassForHtml) < 0) {\n            htmlElement.className = originalHtmlClasses ? originalHtmlClasses + ' ' + newClassForHtml : newClassForHtml;\n            if(onMarkedEmbeddedStatus){\n              onMarkedEmbeddedStatus(newClassForHtml);\n            }\n            _raiseCustomEvent(\"marked-embedded\");\n          }\n        };\n\n        /**\n         * @callback module:pym.Child~onMarkedEmbeddedStatus\n         * @param {String} classname \"embedded\" or \"not-embedded\".\n         */\n\n        /**\n         * Unbind child event handlers and timers.\n         *\n         * @memberof module:pym.Child\n         * @method remove\n         * @instance\n         */\n        this.remove = function() {\n            window.removeEventListener('message', this._processMessage);\n            if (this.timerId) {\n                clearInterval(this.timerId);\n            }\n        };\n\n        // Initialize settings with overrides.\n        for (var key in config) {\n            this.settings[key] = config[key];\n        }\n\n        // Identify what ID the parent knows this child as.\n        this.id = _getParameterByName('childId') || config.id;\n        this.messageRegex = new RegExp('^pym' + MESSAGE_DELIMITER + this.id + MESSAGE_DELIMITER + '(\\\\S+)' + MESSAGE_DELIMITER + '(.*)$');\n\n        // Get the initial width from a URL parameter.\n        var width = parseInt(_getParameterByName('initialWidth'));\n\n        // Get the url of the parent frame\n        this.parentUrl = _getParameterByName(this.settings.parenturlparam);\n\n        // Get the title of the parent frame\n        this.parentTitle = _getParameterByName('parentTitle');\n\n        // Bind the required message handlers\n        this.onMessage('width', this._onWidthMessage);\n\n        // Set up a listener to handle any incoming messages.\n        window.addEventListener('message', this._processMessage, false);\n\n        // If there's a callback function, call it.\n        if (this.settings.renderCallback) {\n            this.settings.renderCallback(width);\n        }\n\n        // Send the initial height to the parent.\n        this.sendHeight();\n\n        // If we're configured to poll, create a setInterval to handle that.\n        if (this.settings.polling) {\n            this.timerId = window.setInterval(this.sendHeight, this.settings.polling);\n        }\n\n        _markWhetherEmbedded(config.onMarkedEmbeddedStatus);\n\n        return this;\n    };\n\n    // Initialize elements with pym data attributes\n    // if we are not in server configuration\n    if(typeof document !== \"undefined\") {\n        lib.autoInit(true);\n    }\n\n    return lib;\n});\n\n","/* global $: true*/\nimport pym from 'pym.js';\n\nconst pymChild = new pym.Child();\n\n// Your graphic code goes here\n//\n// |\n// +   +--+        +--+\n// |   |  +---+    |  |\n// |   |  ||  |    |  |\n// +   |  ||  +----+  |\n// |   |  ||  ||  ||  |\n// |   |  ||  ||  ||  |\n// +   |  ||  ||  ||  |\n// |   |  ||  ||  ||  |\n// |   |  ||  ||  ||  |\n// +-------------------------+\n\n// Call this every time you need to resize the iframe, after your\n// graphic is drawn, etc.\n\n$(document).ready(() => {\n  $('#cityplace').twentytwenty({\n    no_overlay: true\n  });\n  pymChild.sendHeight();\n});\n"]}